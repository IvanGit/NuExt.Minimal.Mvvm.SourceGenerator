namespace NuExt.Minimal.Mvvm.SourceGenerator.Tests
{
    internal static class Callbacks
    {
        public static List<(string source, string? expected)> Sources = new()
        {
            (
                source : """
                using Minimal.Mvvm;

                public partial class MyModel : ViewModelBase
                {
                    [Notify(CallbackName = nameof(OnCurrentViewModelChanged))]
                    private ViewModelBase? _currentViewModel;

                    private void OnCurrentViewModelChanged()
                    {
                    }

                    private void OnCurrentViewModelChanged(BindableBase? oldCurrentViewModel)
                    {
                    }

                    private void OnCurrentViewModelChanged(ViewModelBase? oldCurrentViewModel)
                    {
                    }
                }
                """,
                expected : """
                // <auto-generated>
                //     Auto-generated by [GeneratorName] [GeneratorVersion]
                // </auto-generated>

                #nullable enable

                partial class MyModel
                {
                    private global::System.Action? _currentViewModelChangedCallback;
                    public global::Minimal.Mvvm.ViewModelBase? CurrentViewModel
                    {
                        get => _currentViewModel;
                        set => SetProperty(ref _currentViewModel, value, _currentViewModelChangedCallback ??= OnCurrentViewModelChanged);
                    }
                }
                """ ),
            (
                source : """
                using Minimal.Mvvm;

                public partial class MyModel : ViewModelBase
                {
                    [Notify(CallbackName = nameof(OnCurrentViewModelChanged), PreferCallbackWithParameter = false)]
                    private ViewModelBase? _currentViewModel;

                    private void OnCurrentViewModelChanged()
                    {
                    }

                    private void OnCurrentViewModelChanged(BindableBase? oldCurrentViewModel)
                    {
                    }

                    private void OnCurrentViewModelChanged(ViewModelBase? oldCurrentViewModel)
                    {
                    }
                }
                """,
                expected : """
                // <auto-generated>
                //     Auto-generated by [GeneratorName] [GeneratorVersion]
                // </auto-generated>

                #nullable enable

                partial class MyModel
                {
                    private global::System.Action? _currentViewModelChangedCallback;
                    public global::Minimal.Mvvm.ViewModelBase? CurrentViewModel
                    {
                        get => _currentViewModel;
                        set => SetProperty(ref _currentViewModel, value, _currentViewModelChangedCallback ??= OnCurrentViewModelChanged);
                    }
                }
                """ ),
            (
                source : """
                using Minimal.Mvvm;

                public partial class MyModel : ViewModelBase
                {
                    [Notify(CallbackName = nameof(OnCurrentViewModelChanged), PreferCallbackWithParameter = true)]
                    private ViewModelBase? _currentViewModel;

                    private void OnCurrentViewModelChanged()
                    {
                    }

                    private void OnCurrentViewModelChanged(BindableBase? oldCurrentViewModel)
                    {
                    }

                    private void OnCurrentViewModelChanged(ViewModelBase? oldCurrentViewModel)
                    {
                    }
                }
                """,
                expected : """
                // <auto-generated>
                //     Auto-generated by [GeneratorName] [GeneratorVersion]
                // </auto-generated>

                #nullable enable

                partial class MyModel
                {
                    private global::System.Action<global::Minimal.Mvvm.ViewModelBase?>? _currentViewModelChangedCallback;
                    public global::Minimal.Mvvm.ViewModelBase? CurrentViewModel
                    {
                        get => _currentViewModel;
                        set => SetProperty(ref _currentViewModel, value, _currentViewModelChangedCallback ??= OnCurrentViewModelChanged);
                    }
                }
                """ ),
            (
                source : """
                using Minimal.Mvvm;

                public partial class MyModel : ViewModelBase
                {
                    [Notify(CallbackName = nameof(OnCurrentViewModelChanged), PreferCallbackWithParameter = true)]
                    private ViewModelBase? _currentViewModel;

                    private void OnCurrentViewModelChanged()
                    {
                    }

                    private void OnCurrentViewModelChanged(ViewModelBase? oldCurrentViewModel)
                    {
                    }
                }
                """,
                expected : """
                // <auto-generated>
                //     Auto-generated by [GeneratorName] [GeneratorVersion]
                // </auto-generated>

                #nullable enable

                partial class MyModel
                {
                    private global::System.Action<global::Minimal.Mvvm.ViewModelBase?>? _currentViewModelChangedCallback;
                    public global::Minimal.Mvvm.ViewModelBase? CurrentViewModel
                    {
                        get => _currentViewModel;
                        set => SetProperty(ref _currentViewModel, value, _currentViewModelChangedCallback ??= OnCurrentViewModelChanged);
                    }
                }
                """ ),
            (
                source : """
                using Minimal.Mvvm;

                public partial class MyModel : ViewModelBase
                {
                    [Notify(CallbackName = nameof(OnCurrentViewModelChanged), PreferCallbackWithParameter = true)]
                    private ViewModelBase? _currentViewModel;

                    private void OnCurrentViewModelChanged()
                    {
                    }

                    private void OnCurrentViewModelChanged(BindableBase? oldCurrentViewModel)
                    {
                    }
                }
                """,
                expected : """
                // <auto-generated>
                //     Auto-generated by [GeneratorName] [GeneratorVersion]
                // </auto-generated>

                #nullable enable

                partial class MyModel
                {
                    private global::System.Action<global::Minimal.Mvvm.ViewModelBase?>? _currentViewModelChangedCallback;
                    public global::Minimal.Mvvm.ViewModelBase? CurrentViewModel
                    {
                        get => _currentViewModel;
                        set => SetProperty(ref _currentViewModel, value, _currentViewModelChangedCallback ??= OnCurrentViewModelChanged);
                    }
                }
                """ ),
            (
                source : """
                using Minimal.Mvvm;

                public partial class MyModel : ViewModelBase
                {
                    [Notify(CallbackName = nameof(OnCurrentViewModelChanged), PreferCallbackWithParameter = false)]
                    private ViewModelBase? _currentViewModel;


                    private void OnCurrentViewModelChanged(BindableBase? oldCurrentViewModel)
                    {
                    }

                
                    private void OnCurrentViewModelChanged(ViewModelBase? oldCurrentViewModel)
                    {
                    }
                }
                """,
                expected : """
                // <auto-generated>
                //     Auto-generated by [GeneratorName] [GeneratorVersion]
                // </auto-generated>

                #nullable enable

                partial class MyModel
                {
                    private global::System.Action<global::Minimal.Mvvm.ViewModelBase?>? _currentViewModelChangedCallback;
                    public global::Minimal.Mvvm.ViewModelBase? CurrentViewModel
                    {
                        get => _currentViewModel;
                        set => SetProperty(ref _currentViewModel, value, _currentViewModelChangedCallback ??= OnCurrentViewModelChanged);
                    }
                }
                """ ),
            (
                source : """
                using Minimal.Mvvm;

                public partial class MyModel : ViewModelBase
                {
                    [Notify(CallbackName = nameof(OnCurrentViewModelChanged), PreferCallbackWithParameter = true)]
                    private ViewModelBase? _currentViewModel;

                    private void OnCurrentViewModelChanged()
                    {
                    }
                }
                """,
                expected : """
                // <auto-generated>
                //     Auto-generated by [GeneratorName] [GeneratorVersion]
                // </auto-generated>

                #nullable enable

                partial class MyModel
                {
                    private global::System.Action? _currentViewModelChangedCallback;
                    public global::Minimal.Mvvm.ViewModelBase? CurrentViewModel
                    {
                        get => _currentViewModel;
                        set => SetProperty(ref _currentViewModel, value, _currentViewModelChangedCallback ??= OnCurrentViewModelChanged);
                    }
                }
                """ ),
        };
    }
}

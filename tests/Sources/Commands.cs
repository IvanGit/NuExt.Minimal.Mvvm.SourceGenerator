namespace NuExt.Minimal.Mvvm.SourceGenerator.Tests
{
    internal class Commands
    {
        public static List<(string source, string? expected)> Sources = new()
        {
            (
                source : """
                using Minimal.Mvvm;
                using System.Threading.Tasks;

                public partial class MyViewModel : ViewModelBase
                {
                    [Notify(Setter = AccessModifier.Private), CustomAttribute("[global::System.Text.Json.Serialization.JsonIgnore]")]
                    private async global::System.Threading.Tasks.Task CloseAsync()
                    {
                        await Task.Delay(1000);
                    }

                    /// <summary>
                    /// Opens file.
                    /// </summary>
                    [Notify("OpenFileCommand", Setter = AccessModifier.Private), CustomAttribute("[global::System.Text.Json.Serialization.JsonIgnore]")]
                    private async System.Threading.Tasks.Task OpenAsync(string? filePath)
                    {
                        await Task.Delay(1000);
                    }

                    [Notify(Setter = AccessModifier.Private), CustomAttribute("[global::System.Text.Json.Serialization.JsonIgnore]")]
                    private void Hide()
                    {
                    }

                    [Notify("ShowAndActivateCommand", Setter = AccessModifier.Private), CustomAttribute("[global::System.Text.Json.Serialization.JsonIgnore]")]
                    private void Show()
                    {
                        ActivateCommand?.Execute(true);
                    }

                    [Notify(Setter = AccessModifier.Private), CustomAttribute("[global::System.Text.Json.Serialization.JsonIgnore]")]
                    private void Activate(bool bringToFront)
                    {
                    }

                    [Notify(Setter = AccessModifier.Private, CallbackName=nameof(OnChangeActiveViewModelCommandChanged)), CustomAttribute("[global::System.Text.Json.Serialization.JsonIgnore]")]
                    private async Task ChangeActiveViewModelAsync(ViewModelBase? viewModel)
                    {
                        await Task.Delay(1000);
                    }

                    private void OnChangeActiveViewModelCommandChanged(IAsyncCommand? command)
                    {
                    }
                }
                """,
                expected : """
                // <auto-generated>
                //     Auto-generated by [GeneratorName] [GeneratorVersion]
                // </auto-generated>

                #nullable enable

                partial class MyViewModel
                {
                    private global::Minimal.Mvvm.IAsyncCommand? _closeCommand;
                    [global::System.Text.Json.Serialization.JsonIgnore]
                    public global::Minimal.Mvvm.IAsyncCommand? CloseCommand
                    {
                        get => _closeCommand;
                        private set => SetProperty(ref _closeCommand, value);
                    }

                    private global::Minimal.Mvvm.IAsyncCommand<string?>? _openFileCommand;
                    /// <summary>
                    /// Opens file.
                    /// </summary>
                    [global::System.Text.Json.Serialization.JsonIgnore]
                    public global::Minimal.Mvvm.IAsyncCommand<string?>? OpenFileCommand
                    {
                        get => _openFileCommand;
                        private set => SetProperty(ref _openFileCommand, value);
                    }

                    private global::System.Windows.Input.ICommand? _hideCommand;
                    [global::System.Text.Json.Serialization.JsonIgnore]
                    public global::System.Windows.Input.ICommand? HideCommand
                    {
                        get => _hideCommand;
                        private set => SetProperty(ref _hideCommand, value);
                    }

                    private global::System.Windows.Input.ICommand? _showAndActivateCommand;
                    [global::System.Text.Json.Serialization.JsonIgnore]
                    public global::System.Windows.Input.ICommand? ShowAndActivateCommand
                    {
                        get => _showAndActivateCommand;
                        private set => SetProperty(ref _showAndActivateCommand, value);
                    }

                    private global::Minimal.Mvvm.ICommand<bool>? _activateCommand;
                    [global::System.Text.Json.Serialization.JsonIgnore]
                    public global::Minimal.Mvvm.ICommand<bool>? ActivateCommand
                    {
                        get => _activateCommand;
                        private set => SetProperty(ref _activateCommand, value);
                    }

                    private global::System.Action<global::Minimal.Mvvm.IAsyncCommand<global::Minimal.Mvvm.ViewModelBase?>?>? _changeActiveViewModelCommandChangedCallback;
                    private global::Minimal.Mvvm.IAsyncCommand<global::Minimal.Mvvm.ViewModelBase?>? _changeActiveViewModelCommand;
                    [global::System.Text.Json.Serialization.JsonIgnore]
                    public global::Minimal.Mvvm.IAsyncCommand<global::Minimal.Mvvm.ViewModelBase?>? ChangeActiveViewModelCommand
                    {
                        get => _changeActiveViewModelCommand;
                        private set => SetProperty(ref _changeActiveViewModelCommand, value, _changeActiveViewModelCommandChangedCallback ??= OnChangeActiveViewModelCommandChanged);
                    }
                }
                """ ),
        };
    }
}

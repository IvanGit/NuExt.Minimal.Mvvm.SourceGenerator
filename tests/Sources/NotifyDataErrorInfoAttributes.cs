namespace NuExt.Minimal.Mvvm.SourceGenerator.Tests
{
    internal class NotifyDataErrorInfoAttributes
    {
        public static List<(string source, string? expected)> Sources =
        [
            (
                source : """
                         using Minimal.Mvvm;

                         [NotifyDataErrorInfo]
                         public partial class MyModel : System.ComponentModel.INotifyPropertyChanged
                         {
                             [Notify]
                             private string _name = null!;
                         }
                         """,
                expected : null
            ),
            (
                source : """
                         using Minimal.Mvvm;

                         [NotifyDataErrorInfo]
                         public partial class MyModel : BindableBase, System.ComponentModel.INotifyDataErrorInfo
                         {
                             [Notify]
                             private string _name = null!;
                         }
                         """,
                expected : """
                            // <auto-generated>
                            //     Auto-generated by [GeneratorName] [GeneratorVersion]
                            // </auto-generated>

                            #nullable enable

                            partial class MyModel
                            {
                                public string Name
                                {
                                    get => _name;
                                    set => SetProperty(ref _name, value);
                                }

                                private System.Collections.Concurrent.ConcurrentDictionary<string, System.Collections.Generic.List<string>>? _validationErrors;
                                private System.Collections.Concurrent.ConcurrentDictionary<string, (System.Threading.Tasks.Task task, System.Threading.CancellationTokenSource cts)>? _validationTasks;

                                #region Generated methods for INotifyDataErrorInfo validation

                                /// <summary>
                                /// Cancels the validation task for the specified property.
                                /// </summary>
                                /// <param name="propertyName">
                                /// The name of the property. This parameter may be set by the compiler if called from within a property setter,
                                /// or it should be specified explicitly.
                                /// </param>
                                public void CancelValidationTask([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
                                {
                                    if (propertyName is not { Length: > 0 } || _validationTasks is null || !_validationTasks.TryRemove(propertyName, out var validation))
                                    {
                                        return;
                                    }
                                    var (task, cts) = validation;
                                    try
                                    {
                                        if (!task.IsCompleted)
                                        {
                                            cts.Cancel();
                                        }
                                    }
                                    catch (System.ObjectDisposedException)
                                    {
                                        //do nothing
                                    }
                                }
                                
                                /// <summary>
                                /// Cancels all ongoing validation tasks.
                                /// </summary>
                                /// <remarks>
                                /// It is recommended to call this method during the uninitialization or disposal of the model/object
                                /// to ensure that no lingering validation tasks remain active.
                                /// </remarks>
                                public void CancelAllValidationTasks()
                                {
                                    if (_validationTasks == null)
                                    {
                                        return;
                                    }
                                    System.Collections.Generic.List<System.AggregateException>? exceptions = null;
                                    foreach (var pair in _validationTasks)
                                    {
                                        var (task, cts) = pair.Value;
                                        try
                                        {
                                            if (!task.IsCompleted)
                                            {
                                                cts.Cancel();
                                            }
                                        }
                                        catch (System.ObjectDisposedException)
                                        {
                                            //do nothing
                                        }
                                        catch (System.AggregateException ex)
                                        {
                                            (exceptions ??= []).Add(ex);
                                        }
                                    }
                                    _validationTasks.Clear();
                                    if (exceptions is not null)
                                    {
                                        throw new System.AggregateException(exceptions);
                                    }
                                }
                                
                                /// <summary>
                                /// Clears validation errors for the specified property.
                                /// </summary>
                                /// <param name="propertyName">
                                /// The name of the property. This parameter may be set by the compiler if called from within a property setter,
                                /// or it should be specified explicitly.
                                /// </param>
                                public void ClearErrors([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
                                {
                                    if (propertyName is not { Length: > 0 } || _validationErrors is null || !_validationErrors.TryGetValue(propertyName, out var errors)) return;
                                    errors.Clear();
                                    OnErrorsChanged(propertyName);
                                }
                                
                                /// <summary>
                                /// Clears all validation errors for all properties.
                                /// </summary>
                                public void ClearAllErrors()
                                {
                                    if (_validationErrors is not { Count: > 0 }) return;
                                    foreach (var pair in _validationErrors)
                                    {
                                        ClearErrors(pair.Key);
                                    }
                                    OnErrorsChanged(null);
                                }
                                
                                /// <summary>
                                /// Triggers the <see cref="ErrorsChanged"/> event for the specified property.
                                /// </summary>
                                /// <param name="propertyName">
                                /// The name of the property. This parameter may be set by the compiler if called from within a property setter,
                                /// or it should be specified explicitly.
                                /// </param>
                                private void OnErrorsChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
                                {
                                    ErrorsChanged?.Invoke(this, new System.ComponentModel.DataErrorsChangedEventArgs(propertyName));
                                }
                                
                                /// <summary>
                                /// Sets an error message for the specified property.
                                /// </summary>
                                /// <param name="error">The error message.</param>
                                /// <param name="propertyName">
                                /// The name of the property. This parameter may be set by the compiler if called from within a property setter,
                                /// or it should be specified explicitly.
                                /// </param>
                                public void SetError(string error, [System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
                                {
                                    if (propertyName is not { Length: > 0 })
                                    {
                                        return;
                                    }
                                
                                    (_validationErrors ??= []).AddOrUpdate(
                                        propertyName,
                                        addValueFactory: key => [error],
                                        updateValueFactory: (key, errors) =>
                                        {
                                            errors.Add(error);
                                            return errors;
                                        });
                                
                                    OnErrorsChanged(propertyName);
                                }
                                
                                /// <summary>
                                /// Sets a validation task for the specified property.
                                /// </summary>
                                /// <param name="task">The validation task.</param>
                                /// <param name="cts">The cancellation token source for the task.</param>
                                /// <param name="propertyName">
                                /// The name of the property. This parameter may be set by the compiler if called from within a property setter,
                                /// or it should be specified explicitly.
                                /// </param>
                                public void SetValidationTask(System.Threading.Tasks.Task task, System.Threading.CancellationTokenSource cts, string propertyName)
                                {
                                    if (propertyName is not { Length: > 0 })
                                    {
                                        return;
                                    }
                                
                                    if (_validationTasks?.TryRemove(propertyName, out var oldValidation) == true)
                                    {
                                        var (_, oldCts) = oldValidation;
                                        try
                                        {
                                            oldCts.Cancel();
                                        }
                                        catch (System.ObjectDisposedException)
                                        {
                                            //do nothing
                                        }
                                    }
                                
                                    (_validationTasks ??= [])[propertyName] = (task, cts);
                                }
                                
                                #endregion
                                
                                #region INotifyDataErrorInfo
                                
                                /// <summary>
                                /// Occurs when the validation errors have changed for a property or for the entire object.
                                /// </summary>
                                public event System.EventHandler<System.ComponentModel.DataErrorsChangedEventArgs>? ErrorsChanged;
                                
                                System.Collections.IEnumerable System.ComponentModel.INotifyDataErrorInfo.GetErrors(string? propertyName)
                                {
                                    if (propertyName is not { Length: > 0 } || _validationErrors is null || !_validationErrors.TryGetValue(propertyName, out var errors))
                                    {
                                        return System.Array.Empty<string>();
                                    }
                                    return errors;
                                }
                                
                                /// <summary>
                                /// Gets a value that indicates whether the entity has validation errors.
                                /// </summary>
                                public bool HasErrors => _validationErrors != null && System.Linq.Enumerable.Any(_validationErrors, (pair => pair.Value is { Count: > 0 }));

                                #endregion
                            }
                            """
                           ),
        ];
    }
}
